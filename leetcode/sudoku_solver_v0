
### not so working 
class Solution:
    
    all_digits = ["{}".format(i) for i in range(1,10)]
    
    def generateCandidates(self, current:List[str]) -> List[str]:
        # drop the 
        all_digits_set = set(self.all_digits) 
        current_filtered_set = set(list(filter(lambda a: a != '.', current)))
        candidates = list(all_digits_set.difference(current_filtered_set))
        
        #candidates = set(self.all_digits).difference(set(current.remove("."))).toList()
        #print(f'candidates are {candidates}')
        return candidates
    
    def generateNextAvailablePositions(self, current:List[str]) -> int:
        if '.' in current:
            index = current.index('.')
            return index
        else: 
            return None
        
    def is_candidate_valid_column(self,c:str, r:int,col:int,board: List[List[str]]) -> bool:
        
        rr = 0
        while rr<r: # if first row 
            if board[rr][col] == c :
                print(f'candidate {c} not valid, has occurred in previous rows {board[rr]} ')
                return False
            else:
                rr = rr + 1
        return True
    
    def is_candidate_valid_row (self,c:str, r:int, board: List[List[str]]) -> bool:
        
        for cc in range(0,len(board[r])):
            if board[r][cc] == c:
                print(f'candidate {c} not valid, has occurred in the same row {board[r]}')
                return False
        return True
                
    def is_candidate_valid_grid(self,c:str, r:int, col:int,board: List[List[str]]) -> bool:
        
        r_start = floor(r / 3) * 3 # upper row boundary for grid 
        v_start = floor(col / 3) * 3 # left column boundary grid of 
        
        subboard = [l[v_start:(v_start+3)] for l in board[r_start:(r_start+3)]]
        value_found = any(c in sublist for sublist in subboard)
        if  value_found:
            print(f'candidate {c} not valid, has occurred in the grid {subboard} ')
        return (not value_found)
            
    def is_candidate_valid(self,c:str, r:int,col:int,board: List[List[str]]) -> bool:
        # no need to check similar row
        # need to check previous row same column
        # also the 3x3 grid 
        
        return self.is_candidate_valid_column(c,r,col,board) and self.is_candidate_valid_grid(c,r,col,board) and self.is_candidate_valid_row(c,r,board)
    
    
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        
        self.sudoku(board,0) # starting with the first rows 
    
    def sudoku(self, board: List[List[str]], r: int) -> bool:
        
        current_row = board[r]
        n = len(board)
        position = self.generateNextAvailablePositions(board[r])
        print(f'column {position} is the next available position for row {r}')
        if position is None:
            print(f'no available position to fill in row {r}, return')
            return True
        else:            
            candidates = self.generateCandidates(current_row) # some more complicated tests 
            #print(f'current candidates are {candidates}')
            if len(candidates) == 0:
                return False # should not go here 
            else:
                for c in candidates:
                    if self.is_candidate_valid(c,r,position, board):
                        board[r][position] = c
                        #print(f'successfully put {c} in row {r} and column {position}')
                        # move on to next position in the row
                        if self.sudoku(board,r): # filled this row 
                                print(f'filled row {r}')
                                if r + 1 == len(board):
                                    return True # a solution found 
                                else: 
                                    print(f'move to row {r+1}')
                                    return self.sudoku(board,r+1)  
                        else: 
                            #print(f'remove {board[r][position]} from row {r} and column {position}')
                            board[r][position] = '.'
                        
                return False # means can not fill  
                          